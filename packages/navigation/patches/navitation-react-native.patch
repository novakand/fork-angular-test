diff --git a/packages/navigation/ios/NVTabBarItemManager.m b/packages/navigation/ios/NVTabBarItemManager.m
index 1f0450e..c271d14 100644
--- a/packages/navigation/ios/NVTabBarItemManager.m
+++ b/packages/navigation/ios/NVTabBarItemManager.m
@@ -34,7 +34,10 @@ - (UIView *)view
 
 RCT_EXPORT_VIEW_PROPERTY(title, NSString)
 RCT_EXPORT_VIEW_PROPERTY(badge, NSString)
+RCT_EXPORT_VIEW_PROPERTY(fontFamily, NSString)
+RCT_EXPORT_VIEW_PROPERTY(fontSize, float)
 RCT_EXPORT_VIEW_PROPERTY(badgeColor, UIColor)
+RCT_EXPORT_VIEW_PROPERTY(badgeStyle, NSDictionary)
 RCT_EXPORT_VIEW_PROPERTY(image, UIImage)
 RCT_EXPORT_VIEW_PROPERTY(systemItem, UITabBarSystemItem)
 RCT_EXPORT_VIEW_PROPERTY(onPress, RCTBubblingEventBlock)
diff --git a/packages/navigation/ios/NVTabBarItemView.m b/packages/navigation/ios/NVTabBarItemView.m
index 149b491..cd0e6fb 100644
--- a/packages/navigation/ios/NVTabBarItemView.m
+++ b/packages/navigation/ios/NVTabBarItemView.m
@@ -2,13 +2,19 @@
 #import "NVNavigationStackView.h"
 
 #import <React/UIView+React.h>
+#import <React/RCTConvert.h>
 
-@implementation NVTabBarItemView
+@implementation NVTabBarItemView {
+    NSString *_fontFamily;
+    float _fontSize;
+}
 
 - (id)init
 {
     if (self = [super init]) {
         self.tab = [[UITabBarItem alloc] init];
+        _fontFamily = @"system";
+        _fontSize = 10;
     }
     return self;
 }
@@ -18,6 +24,35 @@ - (void)setTitle:(NSString *)title
     self.tab.title = title;
 }
 
+- (void)setFontFamily:(NSString *)fontFamily
+{
+    if (@available(iOS 5.0, *)) {
+        _fontFamily = fontFamily;
+        [self.tab setTitleTextAttributes:[NSDictionary dictionaryWithObjectsAndKeys:
+                                          [UIFont fontWithName:fontFamily size:_fontSize], NSFontAttributeName,
+                                          nil]
+                                forState:UIControlStateNormal];
+    }
+}
+
+- (void)setFontSize:(float)fontSize
+{
+    if (@available(iOS 5.0, *)) {
+        _fontSize = fontSize;
+        if ([_fontFamily isEqualToString:@"system"]) {
+            [self.tab setTitleTextAttributes:[NSDictionary dictionaryWithObjectsAndKeys:
+                                              [UIFont boldSystemFontOfSize:fontSize], NSFontAttributeName,
+                                              nil]
+                                    forState:UIControlStateNormal];
+        } else {
+            [self.tab setTitleTextAttributes:[NSDictionary dictionaryWithObjectsAndKeys:
+                                              [UIFont fontWithName:_fontFamily size:fontSize], NSFontAttributeName,
+                                              nil]
+                                    forState:UIControlStateNormal];
+        }
+    }
+}
+
 - (void)setBadge:(NSString *)badge
 {
     self.tab.badgeValue = badge;
@@ -30,6 +65,56 @@ - (void)setBadgeColor:(UIColor *)badgeColor
     }
 }
 
+- (void)setBadgeStyle:(NSDictionary *)styles
+{
+    if (@available(iOS 10.0, *)) {
+        __block NSString *fontFamily = @"system";
+        __block float fontSize = 13;
+        NSMutableDictionary *finalStyle = [[NSMutableDictionary alloc]init];
+        NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc]init];
+
+        [styles enumerateKeysAndObjectsUsingBlock:^(id key, id value, BOOL* stop) {
+            if ([key isEqualToString:@"fontFamily"]) {
+                fontFamily = value;
+                if ([fontFamily isEqualToString:@"system"]) {
+                    [finalStyle setValue:[UIFont systemFontOfSize:fontSize] forKey:NSFontAttributeName];
+                } else {
+                    [finalStyle setValue:[UIFont fontWithName:fontFamily size:fontSize] forKey:NSFontAttributeName];
+                }
+            } else if ([key isEqualToString:@"fontSize"]) {
+                fontSize = [value floatValue];
+                if ([fontFamily isEqualToString:@"system"]) {
+                    [finalStyle setValue:[UIFont systemFontOfSize:fontSize] forKey:NSFontAttributeName];
+                } else {
+                    [finalStyle setValue:[UIFont fontWithName:fontFamily size:fontSize] forKey:NSFontAttributeName];
+                }
+            } else if ([key isEqualToString:@"color"]) {
+                [finalStyle setValue:[RCTConvert UIColor:value] forKey:NSForegroundColorAttributeName];
+            } else if ([key isEqualToString:@"letterSpacing"]) {
+                [finalStyle setValue:value forKey:NSKernAttributeName];
+            } else if ([key isEqualToString:@"lineHeight"]) {
+                paragraphStyle.lineSpacing = [value floatValue];
+            } else if ([key isEqualToString:@"textAlign"]) {
+                if ([value isEqualToString:@"auto"]) {
+                    paragraphStyle.alignment = NSTextAlignmentNatural;
+                } else if ([value isEqualToString:@"center"]) {
+                    paragraphStyle.alignment = NSTextAlignmentCenter;
+                } else if ([value isEqualToString:@"justify"]) {
+                    paragraphStyle.alignment = NSTextAlignmentJustified;
+                } else if ([value isEqualToString:@"left"]) {
+                    paragraphStyle.alignment = NSTextAlignmentLeft;
+                } else if ([value isEqualToString:@"right"]) {
+                    paragraphStyle.alignment = NSTextAlignmentRight;
+                }
+            }
+        }];
+        
+        [finalStyle setValue:paragraphStyle forKey:NSParagraphStyleAttributeName];
+
+        [self.tab setBadgeTextAttributes:finalStyle forState: UIControlStateNormal];
+    }
+}
+
 - (void)setImage:(UIImage *)image
 {
     self.tab.image = image;
diff --git a/packages/navigation/ios/NVTabBarManager.m b/packages/navigation/ios/NVTabBarManager.m
index 0554b86..20d6407 100644
--- a/packages/navigation/ios/NVTabBarManager.m
+++ b/packages/navigation/ios/NVTabBarManager.m
@@ -1,5 +1,8 @@
 #import "NVTabBarManager.h"
 #import "NVTabBarView.h"
+#import <React/RCTViewManager.h>
+#import <React/RCTUIManager.h>
+#import <React/RCTLog.h>
 
 @implementation NVTabBarManager
 
@@ -19,4 +22,28 @@ - (UIView *)view
 RCT_EXPORT_VIEW_PROPERTY(mostRecentEventCount, NSInteger)
 RCT_EXPORT_VIEW_PROPERTY(onTabSelected, RCTDirectEventBlock)
 
+RCT_EXPORT_METHOD(hideTabBar:(nonnull NSNumber*) reactTag) {
+    [self.bridge.uiManager addUIBlock:^(RCTUIManager *uiManager, NSDictionary<NSNumber *,UIView *> *viewRegistry) {
+        NVTabBarView *view = viewRegistry[reactTag];
+        if (!view || ![view isKindOfClass:[NVTabBarView class]]) {
+            RCTLogError(@"Cannot find NVTabBarView with tag #%@", reactTag);
+            return;
+        }
+        [view hideTabBar];
+    }];
+
+}
+
+RCT_EXPORT_METHOD(showTabBar:(nonnull NSNumber*) reactTag) {
+    [self.bridge.uiManager addUIBlock:^(RCTUIManager *uiManager, NSDictionary<NSNumber *,UIView *> *viewRegistry) {
+        NVTabBarView *view = viewRegistry[reactTag];
+        if (!view || ![view isKindOfClass:[NVTabBarView class]]) {
+            RCTLogError(@"Cannot find NVTabBarView with tag #%@", reactTag);
+            return;
+        }
+        [view showTabBar];
+    }];
+
+}
+
 @end
diff --git a/packages/navigation/ios/NVTabBarView.h b/packages/navigation/ios/NVTabBarView.h
index ee7eec5..1ca53a7 100644
--- a/packages/navigation/ios/NVTabBarView.h
+++ b/packages/navigation/ios/NVTabBarView.h
@@ -8,4 +8,7 @@
 @property (nonatomic, assign) NSInteger mostRecentEventCount;
 @property (nonatomic, copy) RCTDirectEventBlock onTabSelected;
 
+-(void)hideTabBar;
+-(void)showTabBar;
+
 @end
diff --git a/packages/navigation/ios/NVTabBarView.m b/packages/navigation/ios/NVTabBarView.m
index c7110d2..a28ce64 100644
--- a/packages/navigation/ios/NVTabBarView.m
+++ b/packages/navigation/ios/NVTabBarView.m
@@ -148,4 +148,61 @@ -(void) selectTab
     }
 }
 
+- (void) hideTabBar
+{
+    CGRect screenRect = [[UIScreen mainScreen] bounds];
+
+    [UIView beginAnimations:nil context:NULL];
+    [UIView setAnimationDuration:0.25];
+    [UIView setAnimationCurve:UIViewAnimationCurveEaseOut];
+    float fHeight = screenRect.size.height;
+    if(  UIDeviceOrientationIsLandscape([UIApplication sharedApplication].statusBarOrientation) )
+    {
+        fHeight = screenRect.size.width;
+    }
+
+    for(UIView *view in _tabBarController.view.subviews)
+    {
+        if([view isKindOfClass:[UITabBar class]])
+        {
+            [view setFrame:CGRectMake(view.frame.origin.x, fHeight, view.frame.size.width, view.frame.size.height)];
+        }
+        else
+        {
+            [view setFrame:CGRectMake(view.frame.origin.x, view.frame.origin.y, view.frame.size.width, fHeight)];
+            view.backgroundColor = [UIColor blackColor];
+        }
+    }
+    [UIView commitAnimations];
+}
+
+
+
+- (void) showTabBar
+{
+    CGRect screenRect = [[UIScreen mainScreen] bounds];
+    float fHeight = screenRect.size.height - _tabBarController.tabBar.frame.size.height;
+
+    if(  UIDeviceOrientationIsLandscape([UIApplication sharedApplication].statusBarOrientation) )
+    {
+        fHeight = screenRect.size.width - _tabBarController.tabBar.frame.size.height;
+    }
+
+    [UIView beginAnimations:nil context:NULL];
+    [UIView setAnimationDuration:0.25];
+    [UIView setAnimationCurve:UIViewAnimationCurveEaseOut];
+    for(UIView *view in _tabBarController.view.subviews)
+    {
+        if([view isKindOfClass:[UITabBar class]])
+        {
+            [view setFrame:CGRectMake(view.frame.origin.x, fHeight, view.frame.size.width, view.frame.size.height)];
+        }
+        else
+        {
+            [view setFrame:CGRectMake(view.frame.origin.x, view.frame.origin.y, view.frame.size.width, fHeight)];
+        }
+    }
+    [UIView commitAnimations];
+}
+
 @end
--